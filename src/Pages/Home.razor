@page "/"
@using BlakeSampleDocs.Components
@inject NavigationManager NavigationManager

<div class="p-4 bdr-content-area">
    <!-- Welcome Section -->
    <div class="welcome-section">
        <h1 class="display-6 fw-bold mb-3">Blake Documentation</h1>
        <p class="lead mb-0">Find everything you need to get started, build sites and templates, and deploy successfully.</p>
    </div>

    <!-- Search Bar -->
    <div class="search-container">
        <div class="position-relative">
            <span class="search-icon"><Blazicon Svg="FontAwesomeSolidIcon.MagnifyingGlass" /></span>
            <input type="text" class="form-control form-control-lg search-input" placeholder="Search documentation..." id="searchInput">
        </div>
    </div>

    <!-- Quick Links -->
    <div class="mb-4">
        <h6 class="text-muted text-uppercase small fw-bold mb-3">Quick Access</h6>
        <div class="d-flex flex-wrap">
            @foreach (var quPage in _quickAccessPages)
            {
                var icon = GetCategoryIcon(quPage.Title);

                <a href="@quPage.Slug" class="quick-link">
                    <Blazicon Svg="@icon" class="me-2" />
                    @quPage.Title
                </a>
            }
        </div>
    </div>

    <!-- Categories Grid -->
    <div class="mb-5">
        <h3 class="mb-4">Browse by Category</h3>
        <div class="row g-4 flex flex-row">
            @foreach (var category in _categories.Take(4))
            {
                <CategoryCard Category="@category" />
            }
        </div>
    </div>

    <!-- Recent Updates -->
    <div class="mb-4">
        <div class="d-flex align-items-center justify-content-between mb-3">
            <h4>Recent Updates</h4>
        </div>
        <div class="row g-3">

            @foreach (var update in _recentUpdates)
            {
                var updatedDaysAgo = (DateTime.Now - update.Date)?.Days ?? 0;

                <div class="col-md-6">
                    <div class="d-flex align-items-start">
                        <div class="bg-success rounded-circle me-3 mt-1" style="width: 8px; height: 8px;"></div>
                        <div>
                            <h6 class="mb-1">@update.Title</h6>
                            <p class="text-muted small mb-1">@update.Description</p>
                            <small class="text-muted">@updatedDaysAgo days ago</small>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<SectionContent SectionName="Sidebar">
    <PopularArticles />
</SectionContent>
        
        

@code {

    private List<PageModel> _quickAccessPages = [];

    private List<PageModel> _recentUpdates = [];


    private List<ArticleCategory> _categories = [];
    
    protected override void OnInitialized()
    {
        var pages = GeneratedContentIndex.GetPages();
        
        _quickAccessPages = pages
            .Where(p => p.Metadata.TryGetValue("quickAccess", out var quickAccess) && int.TryParse(quickAccess, out var order) && order > 0)
            .OrderBy(p => p.Metadata["quickAccess"])
            .Take(5)
            .ToList();

        _recentUpdates = pages
            .OrderByDescending(p => p.Date)
            .Take(4)
            .ToList();
        
        foreach (var page in pages)
        {
            if (!page.Metadata.ContainsKey("category") || string.IsNullOrEmpty(page.Metadata["category"].ToString()))
            {
                Console.WriteLine($"Page '{page.Title}' does not have a category defined. Skipping.");
                Console.WriteLine($"Metadata: {string.Join(", ", page.Metadata.Select(kv => $"{kv.Key}: {kv.Value}"))}");
                continue; // Skip pages without a category
            }

            var categoryName = page.Metadata["category"].ToString();
            var category = _categories.FirstOrDefault(c => c.Title.Equals(categoryName, StringComparison.OrdinalIgnoreCase));
            
            if (category == null)
            {
                category = new ArticleCategory(
                    GetCategoryIcon(categoryName), 
                    categoryName, GetCategoryDescription(categoryName), 
                    $"/categories?category={categoryName.ToLowerInvariant()}", 
                    1);
                
                _categories.Add(category);
            }
            else
            {
                var updatedCount = category.ArticleCount + 1;
                var updatedCategory = category with { ArticleCount = updatedCount };
                _categories[_categories.IndexOf(category)] = updatedCategory;
            }
        }

        base.OnInitialized();
    }

    private static SvgIcon GetCategoryIcon(string category)
    {
        return category switch
        {
            "Quick Start" => FontAwesomeSolidIcon.Rocket,
            "Authoring Content" => FontAwesomeSolidIcon.Book,
            "Getting Started" => FontAwesomeSolidIcon.Rocket,
            "Using Blake" => FontAwesomeSolidIcon.Code,
            "Deploying to Azure" => FontAwesomeSolidIcon.CloudArrowUp,
            "Deploying to GitHub" => FontAwesomeSolidIcon.CloudArrowUp,
            "Deploying" => FontAwesomeSolidIcon.CloudArrowUp,
            "Contributing" => FontAwesomeSolidIcon.Gear,
            "Meta" => FontAwesomeSolidIcon.CircleInfo,
            "FAQ" => FontAwesomeSolidIcon.CircleQuestion,
            _ => FontAwesomeSolidIcon.Link
        };
    }
    
    private static string GetCategoryDescription(string category)
    {
        return category switch
        {
            "Getting Started" => "Everything you need to begin your journey. Installation guides, quick start tutorials, and basic concepts.",
            "Using Blake" => "Learn how to build sites and templates using Blake. From basic components to advanced features, find step-by-step guides.",
            "Deploying" => "Understand how to deploy your Blake sites effectively. Covers hosting options, deployment strategies, and best practices.",
            "Contributing" => "Internals of Blake and how to contribute. Learn about the build pipeline, code standards, and how to submit changes.",
            "Meta" => "Meta information about Blake, including the philosophy behind the project, FAQ, and product roadmap.",
            _ => "Explore our documentation for more information."
        };
    }
}