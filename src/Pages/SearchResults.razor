@page "/search/{SearchText}"
@inject SearchService SearchService

<!-- Search Header -->
<div class="search-header">
    <h1 class="display-6 fw-bold mb-3">Search Results</h1>
    <div class="search-stats" id="searchStats">
        @if (!string.IsNullOrWhiteSpace(SearchText))
        {
            <span>Showing @_searchResults.Count result@(_searchResults.Count == 1 ? "" : "s") for "<strong>@SearchText</strong>"</span>
        }
        else
        {
            <span class="search-query">No search query provided</span>
        }
    </div>
</div>

<!-- Search Filters -->
<!-- I'll do this later -->
@* <div class="search-filters">
    <div class="row">
        <div class="col-md-4">
            <div class="filter-group">
                <span class="filter-label">Category</span>
                <div class="filter-options">
                    <a href="#" class="filter-option active" data-filter="all">All</a>
                    <a href="#" class="filter-option" data-filter="getting-started">Getting Started</a>
                    <a href="#" class="filter-option" data-filter="components">Components</a>
                    <a href="#" class="filter-option" data-filter="layout">Layout</a>
                    <a href="#" class="filter-option" data-filter="advanced">Advanced</a>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="filter-group">
                <span class="filter-label">Type</span>
                <div class="filter-options">
                    <a href="#" class="filter-option active" data-filter="all">All</a>
                    <a href="#" class="filter-option" data-filter="guide">Guides</a>
                    <a href="#" class="filter-option" data-filter="reference">Reference</a>
                    <a href="#" class="filter-option" data-filter="tutorial">Tutorials</a>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="filter-group">
                <span class="filter-label">Sort by</span>
                <div class="filter-options">
                    <a href="#" class="filter-option active" data-sort="relevance">Relevance</a>
                    <a href="#" class="filter-option" data-sort="date">Date</a>
                    <a href="#" class="filter-option" data-sort="title">Title</a>
                </div>
            </div>
        </div>
    </div>
</div> *@

<!-- Search Results -->
<div id="searchResults">
    @if (_searchResults.Count ==0)
    {
        <div class="no-results">
            <i class="fas fa-search-minus d-block"></i>
            <h4>No results found</h4>
            <p>Try adjusting your search terms or filters</p>
            <div class="mt-3">
                <a href="/" class="btn btn-outline-primary">Browse Documentation</a>
            </div>
        </div>
    }
    else
    {
        @foreach(var result in _searchResults)
        {
            <div class="search-result">
                <div class="result-title">
                    <a href="@result.Slug">@result.TitleMarkup</a>
                </div>
                <div class="result-url">@result.Slug</div>
                <div class="result-snippet">@result.DescriptionMarkup</div>
                <div class="result-meta">
                    <span class="result-category">@result.CategoryMarkup</span>
                    <span><Blazicon Svg="FontAwesomeSolidIcon.Calendar" class="fas fa-calendar me-1"/>@result.Updated.ToLongDateString()</span>
                    @if(!string.IsNullOrWhiteSpace(@result.Tag))
                    {
                        <span><Blazicon Svg="FontAwesomeSolidIcon.Tag" class="fas fa-tag me-1" />@result.Tag</span>
                    }
                </div>
            </div>
        }
    }
</div>

<!-- Pagination -->
<!-- I'll do this later too -->
@* <div class="pagination-wrapper">
    <nav aria-label="Search results pagination">
        <ul class="pagination justify-content-center" id="pagination">
            <!-- Pagination will be populated by JavaScript -->
        </ul>
    </nav>
</div> *@

@code {
    [Parameter]
    public string? SearchText { get; set; }

    private List<SearchCardResult> _searchResults = [];

    protected override void OnInitialized()
    {
        if (!string.IsNullOrWhiteSpace(SearchText))
        {
            var results = SearchService.Search(SearchText).ToList();

            foreach (var result in results)
            {
                string tag = result.Tags?.Split(' ')[0] ?? string.Empty;

                var updatedResult = new SearchCardResult(
                    Title: GetMarkedText(result.Title),
                    Slug: result.Slug,
                    Description: GetMarkedText(result.Description),
                    Category: GetMarkedText(result.Category),
                    Updated: result.Updated,
                    Tag: tag
                );

                _searchResults.Add(updatedResult);
            }
        }

        base.OnInitialized();
    }

    private string GetMarkedText(string text)
    {
        if (string.IsNullOrWhiteSpace(text) || string.IsNullOrWhiteSpace(SearchText))
            return text;
        return text.Replace(SearchText, $"<mark class=\"bg-primary bg-opacity-25 text-light\">{SearchText}</mark>", StringComparison.OrdinalIgnoreCase);
    }

    private record SearchCardResult(
        string Title,
        string Slug,
        string Description,
        string Category,
        DateTime Updated,
        string Tag
    )
    {
        public MarkupString TitleMarkup => new MarkupString(Title);
        public MarkupString DescriptionMarkup => new MarkupString(Description);
        public MarkupString CategoryMarkup => new MarkupString(Category);
    }
}