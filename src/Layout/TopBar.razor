@inject HotKeys HotKeys
@using BlakeSampleDocs.Services
@using Toolbelt.Blazor.HotKeys2
@using Microsoft.AspNetCore.Components.Web
@implements  IAsyncDisposable
@inject PlatformService PlatformService
@inject IJSRuntime Js
@inject SearchService SearchService
@inject NavigationManager NavigationManager

<div class="top-bar">
    <div class="container-fluid">
        <div class="d-flex align-items-center justify-content-between">
            <!-- Mobile Menu Button (Site Navigation) -->
            <button class="btn btn-outline-secondary d-md-none mobile-menu-btn" type="button" data-bs-toggle="offcanvas" data-bs-target="#siteNavOffcanvas" aria-controls="siteNavOffcanvas">
                <Blazicon Svg="FontAwesomeSolidIcon.Bars" />
            </button>
            
            <a href="/" class="site-title">
                <span class="me-2"><Blazicon Svg="FontAwesomeSolidIcon.BookOpen" /></span>
                Blake Documentation
            </a>

            <div class="d-flex align-items-center gap-3">
                <!-- Mobile Menu Button (Page TOC) -->
                <button class="btn btn-outline-secondary d-md-none mobile-menu-btn page-toc-btn" type="button" data-bs-toggle="offcanvas" data-bs-target="#pageTocOffcanvas" aria-controls="pageTocOffcanvas">
                    <Blazicon Svg="FontAwesomeSolidIcon.ChevronLeft" />
                </button>
                <!-- Desktop Search - Hidden on mobile -->
                <div class="top-search d-none d-md-block">
                    <input type="text" class="form-control top-search-input" placeholder="Search docs..." id="topSearchInput"
                           @bind-value="_searchText"
                           @oninput="async (e) => await DebouncedSearchAsync()"
                           @onkeyup="@OnSearchKeyUp" />
                    <span class="search-shortcut">@GetShortcut()</span>
                </div>

                <div class="dropdown">
                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        <Blazicon Svg="FontAwesomeSolidIcon.Gear" />
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li><a class="dropdown-item" href="#"><Blazicon Svg="FontAwesomeSolidIcon.Palette" />Theme</a></li>
                        <li><a class="dropdown-item" href="#"><Blazicon Svg="FontAwesomeSolidIcon.CodeBranch" />Version: v2.1</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="#"><Blazicon Svg="Lucide.Github" />GitHub</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private HotKeysContext? _hotKeysContext;

    string GetShortcut() => PlatformService.IsMacOS ? "âŒ˜K" : "Ctrl+K";

    private CancellationTokenSource _cts = new();

    private List<SearchResult> _searchResults = [];

    private string _searchText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await PlatformService.InitAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            // Ensure platform detection is complete before registering hotkeys
            await PlatformService.InitAsync();

            // Register the correct hotkey based on platform
            var modKey = PlatformService.IsMacOS ? ModCode.Meta : ModCode.Ctrl;

            _hotKeysContext = this.HotKeys.CreateContext()
                .Add(modKey, Code.K, () => FocusSearch(), new() {
                    Description = "Search the documentation",
                    Exclude = Exclude.None // Allow hotkey to work even when inputs have focus
                });
        }
    }

    private async Task DebouncedSearchAsync()
    {
        await _cts.CancelAsync();
        _cts = new CancellationTokenSource();

        try
        {
            await Task.Delay(300, _cts.Token);
            _searchResults = SearchService.Search(_searchText, 4);
        }
        catch (TaskCanceledException)
        {
            // Ignore cancellation
        }
    }

    private async Task FocusSearch()
    {
        await Js.InvokeVoidAsync("focusElement", "topSearchInput");
        StateHasChanged();
    }

    private void OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(_searchText) && _searchText.Length > 2)
        {
            NavigateToSearch();
        }
    }

    private void NavigateToSearch()
    {
        if (!string.IsNullOrWhiteSpace(_searchText) && _searchText.Length > 2)
        {
            NavigationManager.NavigateTo($"/search/{Uri.EscapeDataString(_searchText)}");
        }
    }

    public ValueTask DisposeAsync() => _hotKeysContext?.DisposeAsync() ?? ValueTask.CompletedTask;

}
