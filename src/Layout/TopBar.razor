@inject HotKeys HotKeys
@using BlakeSampleDocs.Services
@using Toolbelt.Blazor.HotKeys2
@implements  IAsyncDisposable
@inject PlatformService PlatformService



<div class="top-bar">
    <div class="container-fluid">
        <div class="d-flex align-items-center justify-content-between">
            <a href="/" class="site-title">
                <span class="me-2"><Blazicon Svg="FontAwesomeSolidIcon.BookOpen" /></span>
                Blake Documentation
            </a>
            
            <div class="d-flex align-items-center gap-3">
                <div class="top-search">
                    <input type="text" class="form-control top-search-input" placeholder="Search docs..." id="topSearchInput">
                    <span class="search-shortcut">@GetShortcut()</span>
                </div>
                
                <div class="dropdown">
                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        <Blazicon Svg="FontAwesomeSolidIcon.Gear" />
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li><a class="dropdown-item" href="#"><Blazicon Svg="FontAwesomeSolidIcon.Palette" />Theme</a></li>
                        <li><a class="dropdown-item" href="#"><Blazicon Svg="FontAwesomeSolidIcon.CodeBranch" />Version: v2.1</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="#"><Blazicon Svg="Lucide.Github" />GitHub</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private HotKeysContext? _hotKeysContext;
    
    string GetShortcut() => PlatformService.IsMacOS ? "âŒ˜K" : "Ctrl+K";

    protected override async Task OnInitializedAsync()
    {
        await PlatformService.InitAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) {
            _hotKeysContext = this.HotKeys.CreateContext()
                .Add(ModCode.Ctrl|ModCode.Meta, Code.K, FooBar, new() { Description = "do foo bar." });
        }
    }

    private void FooBar()
    {
        // Do something here.
    }

    public ValueTask DisposeAsync() => _hotKeysContext?.DisposeAsync() ?? ValueTask.CompletedTask;
    
}